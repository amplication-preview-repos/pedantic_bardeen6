/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataSetService } from "../dataSet.service";
import { DataSetCreateInput } from "./DataSetCreateInput";
import { DataSet } from "./DataSet";
import { DataSetFindManyArgs } from "./DataSetFindManyArgs";
import { DataSetWhereUniqueInput } from "./DataSetWhereUniqueInput";
import { DataSetUpdateInput } from "./DataSetUpdateInput";

export class DataSetControllerBase {
  constructor(protected readonly service: DataSetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataSet })
  async createDataSet(
    @common.Body() data: DataSetCreateInput
  ): Promise<DataSet> {
    return await this.service.createDataSet({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataSet] })
  @ApiNestedQuery(DataSetFindManyArgs)
  async dataSets(@common.Req() request: Request): Promise<DataSet[]> {
    const args = plainToClass(DataSetFindManyArgs, request.query);
    return this.service.dataSets({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataSet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataSet(
    @common.Param() params: DataSetWhereUniqueInput
  ): Promise<DataSet | null> {
    const result = await this.service.dataSet({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataSet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataSet(
    @common.Param() params: DataSetWhereUniqueInput,
    @common.Body() data: DataSetUpdateInput
  ): Promise<DataSet | null> {
    try {
      return await this.service.updateDataSet({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataSet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataSet(
    @common.Param() params: DataSetWhereUniqueInput
  ): Promise<DataSet | null> {
    try {
      return await this.service.deleteDataSet({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
