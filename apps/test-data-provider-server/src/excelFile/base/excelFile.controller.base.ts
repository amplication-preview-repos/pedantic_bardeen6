/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExcelFileService } from "../excelFile.service";
import { ExcelFileCreateInput } from "./ExcelFileCreateInput";
import { ExcelFile } from "./ExcelFile";
import { ExcelFileFindManyArgs } from "./ExcelFileFindManyArgs";
import { ExcelFileWhereUniqueInput } from "./ExcelFileWhereUniqueInput";
import { ExcelFileUpdateInput } from "./ExcelFileUpdateInput";

export class ExcelFileControllerBase {
  constructor(protected readonly service: ExcelFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExcelFile })
  async createExcelFile(
    @common.Body() data: ExcelFileCreateInput
  ): Promise<ExcelFile> {
    return await this.service.createExcelFile({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExcelFile] })
  @ApiNestedQuery(ExcelFileFindManyArgs)
  async excelFiles(@common.Req() request: Request): Promise<ExcelFile[]> {
    const args = plainToClass(ExcelFileFindManyArgs, request.query);
    return this.service.excelFiles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExcelFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async excelFile(
    @common.Param() params: ExcelFileWhereUniqueInput
  ): Promise<ExcelFile | null> {
    const result = await this.service.excelFile({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExcelFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExcelFile(
    @common.Param() params: ExcelFileWhereUniqueInput,
    @common.Body() data: ExcelFileUpdateInput
  ): Promise<ExcelFile | null> {
    try {
      return await this.service.updateExcelFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExcelFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExcelFile(
    @common.Param() params: ExcelFileWhereUniqueInput
  ): Promise<ExcelFile | null> {
    try {
      return await this.service.deleteExcelFile({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
